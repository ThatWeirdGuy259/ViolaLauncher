name: Build ViolaLauncher

on:
  push:
    tags:
      - 'v*'  # Trigger on tags like v1.0.2

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # 4Ô∏è‚É£ Clean old builds
      - name: Clean old builds
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force build, dist, output -ErrorAction SilentlyContinue

      # 5Ô∏è‚É£ Build launcher .exe
      - name: Build launcher
        shell: pwsh
        run: |
          pyinstaller `
            --noconsole `
            --windowed `
            --onefile `
            --name "ViolaLauncher" `
            --icon "src/assets/logo.ico" `
            --add-data "src/assets/logo.ico;assets" `
            --add-data "src/assets/logo.png;assets" `
            --add-data "src/assets/background.png;assets" `
            src/viola_launcher.py

      # 6Ô∏è‚É£ Ensure output folder exists
      - name: Ensure output folder
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path output

      # 7Ô∏è‚É£ Zip the executable
      - name: Zip executable
        shell: pwsh
        run: |
          Compress-Archive -Path '.\dist\ViolaLauncher.exe' -DestinationPath "output\ViolaLauncher-${{ github.ref_name }}.zip" -Force

      # 8Ô∏è‚É£ Calculate SHA256
      - name: Calculate SHA256
        id: hash
        shell: pwsh
        run: |
          $hash = Get-FileHash "output\ViolaLauncher-${{ github.ref_name }}.zip" -Algorithm SHA256
          Write-Output "SHA256=$($hash.Hash)" >> $GITHUB_ENV

      # 9Ô∏è‚É£ Generate latest.json for auto-update
      - name: Generate latest.json
        shell: pwsh
        run: |
          # Extract version number from the tag (remove leading 'v')
          $version = $env:GITHUB_REF_NAME.Substring(1)

          # URL to the zipped executable in this release
          $url = "https://github.com/${{ github.repository }}/releases/download/$env:GITHUB_REF_NAME/ViolaLauncher-$env:GITHUB_REF_NAME.zip"

          # SHA256 hash of the zip
          $sha256 = $env:SHA256

          # Create latest.json content
          $latestJson = @{
              version = $version
              url     = $url
              sha256  = $sha256
              notes   = "Automated build from GitHub Actions."
          } | ConvertTo-Json -Compress

          # Write latest.json to repo root (overwrite)
          Set-Content -Path latest.json -Value $latestJson -Encoding UTF8

      - name: Commit and push latest.json
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "Viola Bot"
          author_email: "viola-bot@example.com"
          message: "Update latest.json to version ${{ github.ref_name }}"
          add: "latest.json"
          push: true


      # üîü Optional: list output folder for debugging
      - name: List output folder
        shell: pwsh
        run: dir output

      # 1Ô∏è‚É£1Ô∏è‚É£ Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: |
            output/ViolaLauncher-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      # 1Ô∏è‚É£2Ô∏è‚É£ Upload latest.json as release asset
      - name: Upload latest.json
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: latest.json
          asset_name: latest.json
          asset_content_type: application/json
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
