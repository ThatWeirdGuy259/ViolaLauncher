name: Build ViolaLauncher

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # 4Ô∏è‚É£ Clean old builds
      - name: Clean old builds
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force build, dist, output -ErrorAction SilentlyContinue

      # 5Ô∏è‚É£ Build launcher
      - name: Build launcher
        shell: pwsh
        run: |
          pyinstaller `
            --noconsole `
            --windowed `
            --onefile `
            --name "ViolaLauncher" `
            --icon "src/assets/logo.ico" `
            --add-data "src/assets/logo.ico;assets" `
            --add-data "src/assets/logo.png;assets" `
            --add-data "src/assets/background.png;assets" `
            src/viola_launcher.py

      # 6Ô∏è‚É£ Ensure output folder
      - name: Ensure output folder
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path output

      # 7Ô∏è‚É£ Zip executable
      - name: Zip executable
        shell: pwsh
        run: Compress-Archive -Path '.\dist\ViolaLauncher.exe' -DestinationPath "output\ViolaLauncher-${{ github.ref_name }}.zip" -Force

      # 8Ô∏è‚É£ Create GitHub Release and upload zip
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: output/ViolaLauncher-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      # 9Ô∏è‚É£ Generate latest.json after release exists
      - name: Generate latest.json
        shell: pwsh
        run: |
          $version = $env:GITHUB_REF_NAME.Substring(1)
          $url = "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/ViolaLauncher-${{ github.ref_name }}.zip"
          $sha256 = (Get-FileHash "output\ViolaLauncher-${{ github.ref_name }}.zip" -Algorithm SHA256).Hash

          $latestJson = @{
              version = $version
              url     = $url
              sha256  = $sha256
              notes   = "Automated build from GitHub Actions."
          } | ConvertTo-Json -Compress

          Set-Content -Path latest.json -Value $latestJson -Encoding UTF8

      # üîü Commit and push latest.json
      - name: Commit and push latest.json
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "Viola Bot"
          author_email: "viola-bot@example.com"
          message: "Update latest.json for ${{ github.ref_name }}"
          add: latest.json
